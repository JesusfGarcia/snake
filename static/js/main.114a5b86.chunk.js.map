{"version":3,"sources":["utils/foodColition.js","components/Canvas.jsx","utils/borderColition.js","utils/bodyColition.js","App.js","reportWebVitals.js","index.js"],"names":["foodColition","body","coords","itsOk","i","length","piece","top","left","initialState","head","direction","Canvas","React","snake","setSnake","food","setFood","isPlaying","setIsPlaying","score","setScore","newCoordinate","newCoords","Math","floor","random","interval","setTimeout","newHead","newBody","oldHeadCoords","map","item","idx","unshift","newSnake","headLeft","headTop","borderColition","isColition","actualBody","bodyColition","clearInterval","touchMove","key","tabIndex","onKeyDown","e","preventDefault","className","style","width","height","borderRadius","onClick","display","flexDirection","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.114a5b86.chunk.js","sourcesContent":["export const foodColition = (body, coords) => {\n  let itsOk = false;\n  for (let i = 0; i < body.length; i++) {\n    const piece = body[i];\n    if (coords.top === piece.top && coords.left === piece.left) {\n      itsOk = true;\n      break;\n    }\n  }\n  return itsOk;\n};\n","import * as React from \"react\";\nimport { borderColition } from \"../utils/borderColition\";\nimport { bodyColition } from \"../utils/bodyColition\";\nimport { foodColition } from \"../utils/foodColition\";\n\nconst squareLong = 5;\nconst refreshTime = 200;\nconst initialState = {\n  head: { top: 0, left: 10, direction: \"right\" },\n  body: [\n    { top: 0, left: 0 },\n    { top: 0, left: squareLong },\n  ],\n};\n\nexport default function Canvas() {\n  const [snake, setSnake] = React.useState(initialState);\n  const [food, setFood] = React.useState({ top: 30, left: 50 });\n  const [isPlaying, setIsPlaying] = React.useState(false);\n  const [score, setScore] = React.useState(0);\n  const newCoordinate = () => {\n    let newCoords;\n    do {\n      newCoords = {\n        top: Math.floor(Math.random() * (20 - 0)) * squareLong,\n        left: Math.floor(Math.random() * (20 - 0)) * squareLong,\n      };\n    } while (foodColition(snake.body, newCoords));\n    return newCoords;\n  };\n\n  React.useEffect(() => {\n    if (isPlaying) {\n      const interval = setTimeout(() => {\n        let newHead;\n        let newBody;\n        const oldHeadCoords = {\n          top: snake.head.top,\n          left: snake.head.left,\n        };\n        switch (snake.head.direction) {\n          case \"right\":\n            newHead = {\n              ...snake.head,\n              left: snake.head.left + squareLong,\n            };\n            break;\n          case \"top\":\n            newHead = {\n              ...snake.head,\n              top: snake.head.top - squareLong,\n            };\n            break;\n          case \"bot\":\n            newHead = {\n              ...snake.head,\n              top: snake.head.top + squareLong,\n            };\n            break;\n          case \"left\":\n            newHead = {\n              ...snake.head,\n              left: snake.head.left - squareLong,\n            };\n          default:\n            break;\n        }\n\n        newBody = snake.body.map((item, idx) => {\n          if (idx === snake.body.length - 1) {\n            return oldHeadCoords;\n          } else {\n            return snake.body[idx + 1];\n          }\n        });\n\n        if (newHead.top === food.top && newHead.left === food.left) {\n          newBody.unshift(snake.body[0]);\n          setFood(newCoordinate);\n          setScore(score + 1);\n        }\n\n        const newSnake = {\n          head: newHead,\n          body: newBody,\n        };\n\n        if (borderColition(newHead) || bodyColition(newHead, newBody)) {\n          setSnake(initialState);\n          setIsPlaying(false);\n        } else {\n          setSnake(newSnake);\n        }\n      }, refreshTime);\n\n      return () => clearInterval(interval);\n    }\n  }, [snake, isPlaying]);\n\n  const move = (e) => {\n    e.preventDefault();\n    const key = e.key;\n    switch (key) {\n      case \"w\":\n        setSnake({\n          ...snake,\n          head: {\n            ...snake.head,\n            direction: \"top\",\n          },\n        });\n        break;\n      case \"a\":\n        setSnake({\n          ...snake,\n          head: {\n            ...snake.head,\n            direction: \"left\",\n          },\n        });\n        break;\n      case \"s\":\n        setSnake({\n          ...snake,\n          head: {\n            ...snake.head,\n            direction: \"bot\",\n          },\n        });\n        break;\n      case \"d\":\n        setSnake({\n          ...snake,\n          head: {\n            ...snake.head,\n            direction: \"right\",\n          },\n        });\n      default:\n        break;\n    }\n  };\n\n  const touchMove = (key) => {\n    switch (key) {\n      case \"w\":\n        setSnake({\n          ...snake,\n          head: {\n            ...snake.head,\n            direction: \"top\",\n          },\n        });\n        break;\n      case \"a\":\n        setSnake({\n          ...snake,\n          head: {\n            ...snake.head,\n            direction: \"left\",\n          },\n        });\n        break;\n      case \"s\":\n        setSnake({\n          ...snake,\n          head: {\n            ...snake.head,\n            direction: \"bot\",\n          },\n        });\n        break;\n      case \"d\":\n        setSnake({\n          ...snake,\n          head: {\n            ...snake.head,\n            direction: \"right\",\n          },\n        });\n      default:\n        break;\n    }\n  };\n\n  const startNewGame = () => {\n    setIsPlaying(true);\n    setScore(0);\n  };\n\n  return (\n    <div tabIndex=\"0\" onKeyDown={move} className=\"container\">\n      <div className=\"score\">\n        <span>score: </span>\n        <span>{score}</span>\n      </div>\n      <div className=\"tablero\">\n        {isPlaying ? (\n          <>\n            <div\n              className=\"cuadrito\"\n              style={{\n                top: `${snake.head.top}%`,\n                left: `${snake.head.left}%`,\n                width: `${squareLong}%`,\n                height: `${squareLong}%`,\n              }}\n            ></div>\n            {snake.body.map((item, idx) => {\n              return (\n                <div\n                  key={idx}\n                  className=\"cuadrito\"\n                  style={{\n                    top: `${item.top}%`,\n                    left: `${item.left}%`,\n                    width: `${squareLong}%`,\n                    height: `${squareLong}%`,\n                  }}\n                ></div>\n              );\n            })}\n            <div\n              className=\"food\"\n              style={{\n                top: `${food.top}%`,\n                left: `${food.left}%`,\n                width: `${squareLong}%`,\n                height: `${squareLong}%`,\n                borderRadius: `${100}%`,\n              }}\n            ></div>\n          </>\n        ) : (\n          <div className=\"start-title\" onClick={startNewGame}>\n            start\n          </div>\n        )}\n      </div>\n      <div className=\"controls\">\n        <div onClick={() => touchMove(\"w\")} className=\"vertical\">\n          ↑\n        </div>\n        <div style={{ display: \"flex\", flexDirection: \"row\", width: \"100%\" }}>\n          <div onClick={() => touchMove(\"a\")}>←</div>\n          <div onClick={() => touchMove(\"d\")}>→</div>\n        </div>\n\n        <div onClick={() => touchMove(\"s\")} className=\"vertical\">\n          ↓\n        </div>\n      </div>\n    </div>\n  );\n}\n","export const borderColition = (snake) => {\n  const headLeft = snake.left;\n  const headTop = snake.top;\n  if (headLeft >= 100 || headLeft < 0 || headTop >= 100 || headTop < 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n","export const bodyColition = (head, body) => {\n  let isColition = false;\n\n  for (let i = 0; i < body.length; i++) {\n    let actualBody = body[i];\n    if (head.top === actualBody.top && head.left === actualBody.left) {\n      isColition = true;\n      break;\n    }\n  }\n  return isColition;\n};\n","import \"./App.css\";\nimport Snake from \"./components/Canvas\";\nfunction App() {\n  return <Snake />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}